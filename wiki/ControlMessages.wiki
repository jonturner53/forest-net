#summary Description of control message formats and semantics.

Forest is an overlay network designed to support large real-time distributed applications.
This report documents the control packets used in Forest networks.

Every Forest packet contains a packet type field in its packet header.
This is an eight bit field and the various packet types each have
an associated type code.
The table below lists all the packet types and their type code names.
The numerical values of these type codes can be found in the
source code file forest.h, although programs generally refer to
these codes by their names rather than their type codes.


|| type code || Description ||
|| USER_DATA ||  Ordinary user data packet. ||
|| SUB_UNSUB ||  Subscribe/unsubscribe to one or more multicast groups. ||
|| CONNECT ||  Establish link between a client and the Forest overlay. ||
|| DISCONNECT || Drop a link between a client and the Forest overlay.||
||           ||Packets used by clients to configure comtrees. ||
|| CLIENT_ADD_COMTREE || Client request to add a new comtree. ||
|| CLIENT_DROP_COMTREE || Client request to drop a comtree. ||
|| CLIENT_GET_COMTREE || Client request to retrieve comtree attributes. ||
|| CLIENT_MOD_COMTREE || Client request to modify comtree attributes. ||
|| CLIENT_MOD_LEAF_RATE || Client request to modify rates for a particular comtree leaf. ||
|| CLIENT_AUTOSIZE_COMTREE || Client request to adjust internal link rates to match leaf rates. ||
|| CLIENT_JOIN_COMTREE || Client request to join an existing comtree. ||
|| CLIENT_LEAVE_COMTREE || Client request to leave an existing comtree. ||
||  RTE_REPLY || Reply to request for route to a unicast address. ||
||  ADD_IFACE || Add a new interface to a router. ||
||  DROP_IFACE || Remove an interface from a router. ||
||  GET_IFACE || Retrieve information relating to a router interface. ||
||  MOD_IFACE || Modify attributes of a router interface. ||
||  ADD_LINK || Add a link to a router. ||
||  DROP_LINK || Remove a link from a router. ||
||  GET_LINK ||Retrieve information relating to a router link. ||
||  MOD_LINK || Modify attributes of a link at a router. 			||
||  ADD_COMTREE || Add a comtree to a router's local configuration. ||
||  DROP_COMTREE || Remove a comtree from a router's local configuration. ||
||  ADD_COMTREE_LINK || Add a link to a comtree at a router. ||
||  DROP_COMTREE_LINK || Remove a link from a comtree at a router. ||
||  GET_COMTREE || Retrive comtree configuration information at a router. ||
||  MOD_COMTREE || Modify comtree attributes at a router. ||
||  ADD_ROUTE || Add a route to a router's local configuration. ||
||  DROP_ROUTE ||Remove a route from a router's local configuration. ||
||  ADD_ROUTE_LINK || Add a link to a multicast route at a router. ||
||  DROP_ROUTE_LINK ||Remove a link from a multicast route at a router. ||
||  GET_ROUTE || Retrieve a route. ||
||  MOD_ROUTE || Modify a route. ||
||  POS_REPLY || Generic positive reply packet. ||
||  NEG_REPLY || Generic negative reply packet. ||




Control packets in Forest all take the form of a simple request/response interaction.
In most cases, the response is simply a positive or negative acknowledgment,
indicating that the requested action was completed successfully, or that
it failed for some reason. 

Every request packet contains a sequence number in the first word of the payload.
This value is returned as the first word of every response, giving requestors a simple
way of matching responses to earlier requests.
Control packets are idempotent; that is, one can perform the action specified in
a control packet several times and the result will be the same as it would be if it were
done once. This means that requestors can repeat a control packet as often as
needed to get a response.
The body of the control packets consists of a set of (attribute code, value) pairs.
Both the attribute code and the value are encoded as 32 bit integers.
These pairs appear in the payload immediately following the sequence number.
The pairs may appear in any order, and some attributes are optional.
The payload is required to consist only of these pairs.
Positive reply packets may contain additional information in the form of
(attribute code, value) pairs. The values returned will depend on the type
of the original request.
In the case of failures, a text string is returned in the
payload of the packet (after the sequence number), providing further 
information about the failure.

Details of the attributes used with various control messages are provided in the next table.

[http://code.google.com/p/forest-net/wiki/Overview Back to Overview]